#!/bin/sh
#
# The init order is as follows:
#   scripts in /etc/runit_init.d
#
#   Start services in /etc/service
#
#   Start services in /etc/user-service
#
#   if exists /etc/rc.local 
#
#  Shutdown:
#
#   scripts in /etc/runit_finish.d
#   
#   stop services in /etc/user-service
#
#   stop services in /etc/service



exit_if_error() {
    local code=$1
    local message=$2

    if [ $code != 0 ]; then
        echo >&2 "${message}"
        exit $code
    fi
}

run_script() {
    local script_file=$1

    if test -x "${script_file}"
    then
        echo >&2 "- running ${script_file}"
        "${script_file}"
        rc=$?

        exit_if_error $rc "${script_file} failed with exit code ${rc}"
    else
        echo >&2 "- ${script_file} is not executable, skipping"
        return 0
    fi
}

link_svc_finish() {

    if [ "$#" -eq 0 ]
    then
        echo >&2 "no ESSENTIAL_SERVICES defined, skipping svcfinish"
        return 0
    fi

    for svc_dir in $@
    do
        if test "x" = "x${svc_dir}"
        then
            continue
        fi

        finish_script="${svc_dir}/finish"

        echo >&2 " - monitoring ${finish_script} for exit"

        if test ! -e "${finish_script}"
        then
            ln -s /sbin/svc_finish "${finish_script}"
            exit_if_error $? "failed to link ${finish_script}"
        fi
    done
}

# Run init in stages

# 1. First create environment and run /etc/runit_init.d scripts
echo >&2 "- pre-init"

# Write the environment
env -u PWD -u HOME -u TERM -u OLDPWD -u _ \
    | awk -F'=' '{ $2 > "/etc/runit_envvars/"$1 }'

# Run scripts in /etc/runit_init.d
for script in $(find /etc/runit_init.d -type f | sort)
do
    run_script "$script"
done

echo >&2 "- pre-init complete"

# 2. listener
echo >&2 "starting svc_monitor"

# Add finish script so that termination of service terminates container
link_svc_finish $ESSENTIAL_SERVICES
/sbin/chpst -P -e /etc/runit_envvars /sbin/svc_monitor $$ &
svc_monitor_pid=$!

# 3. Start services
echo >&2 "starting /etc/service"
/sbin/chpst -P -e /etc/runit_envvars /sbin/runsvdir /etc/service &
runsvdir_pid=$!

# 4. Start services that run as normal user
echo >&2 "starting /etc/user-service"
chown -R user-service:user-service /etc/user-service
/sbin/chpst -P -e /etc/runit_envvars -u user-service:user-service /sbin/runsvdir /etc/user-service &
runsvdir_user_pid=$!

# 5. Execute /etc/rc.local if exists
if test -f /etc/rc.local
then
    run_script /etc/rc.local
fi

signal_handler() {

    local control_fifo=$1

    # Ensure services wont restart
    echo >&2 "terminating on signal.."
    echo "signal" > "${control_fifo}"

    if test -d /etc/runit_finish.d
    then
        for script in $(find /etc/runit_finish.d -type f | sort)
        do
            run_script "$script"
        done
    fi

    echo >&2 "terminating /etc/user-service"
    kill -1 $runsvdir_user_pid
    wait $runsvdir_user_pid

    echo >&2 "terminating /etc/service"
    kill -1 $runsvdir_pid
    wait $runsvdir_pid

    echo >&2 "terminating listen_control_fifo"
    echo "terminate" > "${control_fifo}"
    wait $svc_monitor_pid
}

trap "signal_handler ${CONTROL_FIFO}" SIGQUIT SIGINT SIGTERM
wait $runsvdir_pid $runsvdir_user_pid $svc_monitor_pid
