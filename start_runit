#!/bin/sh
#
# The init order is as follows:
#   scripts in /etc/runit_init.d
#
#   Start services in /etc/service
#
#   Start services in /etc/user-service
#
#   if exists /etc/rc.local 
#

run_script() {
    local script_file=$1

    if test -x "${script_file}"
    then
    	echo >&2 "- running ${script_file}"
    	$file
        rc=$?

        if [ $rc != 0 ]
        then
            echo >&2 "${script_file} failed with exit code ${rc}"
            return $rc
        fi
    else
    	echo >&2 "- ${script_file} is not executable, skipping"
        return 0
    fi
}

echo >&2 "- pre-init"

# Run scripts in /etc/runit_init.d
for file in $(find /etc/runit_init.d -type f)
do
	run_script $file
    rc=$?

    if [ $rc != 0 ]
    then
        echo "terminating due to failure in /etc/runit_init.d stage"
        exit $rc
    fi
done

echo >&2 "- pre-init complete"

# Write the environment
env -u PWD -u HOME -u TERM -u OLDPWD -u _ \
    | awk -F'=' '{ $2 > "/etc/runit_envvars/"$1 }'

echo >&2 "starting /etc/service"
/sbin/chpst -e /etc/runit_envvars /sbin/runsvdir -P /etc/service &
runsvdir_pid=$!

echo >&2 "starting /etc/user-service"
chown -R user-service:user-service /etc/user-service
/sbin/chpst -e /etc/runit_envvars -u user-service:user-service /sbin/runsvdir /etc/user-service &
runsvdir_user_pid=$!

signal_handler() {
    echo >&2 "terminating on signal.."

    echo >&2 "terminating /etc/user-service"
    kill -1 $runsvdir_user_pid
    wait $runsvdir_user_pid

    echo >&2 "terminating /etc/service"
    kill -1 $runsvdir_pid
    wait $runsvdir_pid
}

# Run /etc/rc.local
if test -f /etc/rc.local
then
    run_script /etc/rc.local
    rc=$?

    if [ $rc != 0 ]
        echo "terminating due to failure in /etc/rc.local"
        exit $rc
    fi
fi

trap signal_handler SIGQUIT SIGINT SIGTERM
wait $runsvdir_pid $runsvdir_user_pid
