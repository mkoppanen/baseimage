#!/bin/sh
#
# The init order is as follows:
#   scripts in /etc/runit_init.d
#
#   Start services in /etc/service
#
#   Start services in /etc/user-service
#
#   if exists /etc/rc.local 
#

exit_if_error() {
    local code=$1
    local message=$2

    if [ $code != 0 ]; then
        echo >&2 "${message}"
        exit $code
    fi
}

run_script() {
    local script_file=$1

    if test -x "${script_file}"
    then
        echo >&2 "- running ${script_file}"
        "${script_file}"
        rc=$?

        exit_if_error $rc "${script_file} failed with exit code ${rc}"
    else
        echo >&2 "- ${script_file} is not executable, skipping"
        return 0
    fi
}

create_control_fifo() {

    local svcfinish_dir=/var/run/svcfinish

    if test ! -d "${svcfinish_dir}"
    then
        mkdir -p "${svcfinish_dir}"
        exit_if_error $? "failed to create ${svcfinish_dir}"
    fi

    if test -e "${svcfinish_dir}/control"
    then
        rm "${svcfinish_dir}/control"
    fi

    mkfifo "${svcfinish_dir}/control"
    exit_if_error $? "failed to create ${svcfinish_dir}/control"

    chmod 666 "${svcfinish_dir}/control"
}

wait_for_svcfinish() {

    local kill_pid_on_exit=$1
    local shutting_down="no"

    create_control_fifo

    while true
    do
        if read cmd; then
            case "$cmd" in
                "exit"*)
                    if test "x${shutting_down}" = "xno"
                    then
                        shutting_down="yes"

                        echo "$cmd" | awk '{ printf "%s exited with params: %d %d, terminating container..", $2, $3, $4 }'
                        echo ""

                        # Stop the service from restarting
                        local svc_dir=$(echo "$cmd" | awk '{ print $2 }')
                        if test -p "${svc_dir}/supervise/control"
                        then
                            printf x > "${svc_dir}/supervise/control"
                        fi

                        kill $kill_pid_on_exit
                    fi
                ;;

                "signal")
                    return 0
                ;;

                *) ;;
            esac
        fi
    done <"/var/run/svcfinish/control"
}

monitor_essential_services() {

    if [ "$#" -eq 0 ]
    then
        echo >&2 "no ESSENTIAL_SERVICES defined, skipping svcfinish"
        return 0
    fi

    for svc_dir in $@
    do
        if test "x" = "x${svc_dir}"
        then
            continue
        fi

        test -d "${svc_dir}"
        exit_if_error $? "${svc_dir} is marked in ESSENTIAL_SERVICES but service directory is missing"

        finish_script="${svc_dir}/finish"

        echo >&2 "monitoring ${finish_script} for exit"

        if test ! -e "${finish_script}"
        then
            ln -s /sbin/svcfinish "${finish_script}"
            exit_if_error $? "failed to link ${finish_script}"
        fi
    done
}

echo >&2 "- pre-init"

# Run scripts in /etc/runit_init.d
for script in $(find /etc/runit_init.d -type f | sort)
do
    run_script "$script"
done

# Add finish script so that termination of service terminates container
monitor_essential_services $ESSENTIAL_SERVICES

# Put listener in the background
wait_for_svcfinish $$ &
wait_for_svcfinish_pid=$!

echo >&2 "- pre-init complete"

# Write the environment
env -u PWD -u HOME -u TERM -u OLDPWD -u _ \
    | awk -F'=' '{ $2 > "/etc/runit_envvars/"$1 }'

echo >&2 "starting /etc/service"
/sbin/chpst -e /etc/runit_envvars /sbin/runsvdir /etc/service &
runsvdir_pid=$!

echo >&2 "starting /etc/user-service"
chown -R user-service:user-service /etc/user-service
/sbin/chpst -e /etc/runit_envvars -u user-service:user-service /sbin/runsvdir /etc/user-service &
runsvdir_user_pid=$!

# Run /etc/rc.local
if test -f /etc/rc.local
then
    run_script /etc/rc.local
fi

signal_handler() {
    echo >&2 "terminating on signal.."

    echo >&2 "terminating /etc/user-service"
    kill -1 $runsvdir_user_pid
    wait $runsvdir_user_pid

    echo >&2 "terminating /etc/service"
    kill -1 $runsvdir_pid
    wait $runsvdir_pid

    echo >&2 "terminating wait_for_svcfinish_pid"
    echo "signal" > "/var/run/svcfinish/control"
    wait $wait_for_svcfinish_pid
}

trap signal_handler SIGQUIT SIGINT SIGTERM
wait $runsvdir_pid $runsvdir_user_pid $wait_for_svcfinish_pid
